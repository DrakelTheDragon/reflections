1) When would you want to create a remote repository rather than keeping all your work local?

You would want to use a remote repository when you are working on a group project. Also, it would be good to use incase your local machine breaks.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Manually pulling changes allows me to determine when code is brought down. This means that code won't change unexpectedly without me knowing about it.

3) Describe the differences between forks, clones, and branches.  When would you use one instead of another?

A clone creates a clone - a copy of a repo. A branch takes a working directory and adds a new line of commits which runs in tandem with the master branch in the same repo. A fork is like a clone only it is on the github server: cloning one repo on github to another repo on github. You use a fork when you like a repo on github and want to tinker with it and/or make it your own - this would be equivalent to cloning someone else's repo to your computer then pushing that repo up to github as your own remote repo.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

If you are going to be without internet for awhile you can still work on your local branch until you decide you need to merge.

5) How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

If I had to collaborate on a coding project without using Git or GitHub (or any other form of version control designed for code), I might suggest that we all make changes to a shared folder, for example, a DropBox folder.  This would be a ligter-weight solution than using Git and GitHub.  However, if we both wanted to work on the same part of the file, it would be very difficult to avoid clobbering each other's changes. Real-time collaborative editors like Google Docs are also great for collaboration, but I don't know a good version of Google Docs for code. Even if I did, I would be hesitant to use this approach on code that it's important to keep bug-free.  I would be worried that someone else would add a change that combined with my change to make a bug, and I might not even notice their change!

6) When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

    Fill in your answer here